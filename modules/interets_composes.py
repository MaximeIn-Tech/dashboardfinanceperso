import math

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st


def interets_composes_render():
    st.header("üè¶ Calculateur d'Int√©r√™ts Compos√©s")
    st.write(
        "Simulez la croissance de votre capital avec versements p√©riodiques et int√©r√™ts compos√©s."
    )

    # === Mise en page 3 colonnes ===

    col1, col2, col3 = st.columns(3)

    # === Section 1: Capital & Versements ===
    with col1:
        st.subheader(
            "üí∂ Capital & Versements",
            help="D√©finissez votre point de d√©part et vos apports r√©guliers.",
        )

        capital_initial = st.number_input(
            "Capital initial (‚Ç¨)",
            min_value=0.0,
            value=0.0,
            step=100.0,
            key="ic_capital",
            format="%.0f",
            help="Montant dont vous disposez au d√©part, sans encore g√©n√©rer d‚Äôint√©r√™ts.",
        )

        col_v1, col_v2 = st.columns([2, 1])
        with col_v1:
            versement_periodique = st.number_input(
                "Montant du versement p√©riodique (‚Ç¨)",
                min_value=0.0,
                value=100.0,
                step=10.0,
                key="ic_versement",
                format="%.0f",
                help="Somme ajout√©e r√©guli√®rement pour faire grossir votre capital.",
            )
        with col_v2:
            frequence_versement = st.selectbox(
                "Fr√©quence",
                ["Mensuel", "Trimestriel", "Semestriel", "Annuel"],
                key="ic_freq_versement",
                help="√Ä quelle fr√©quence vous ajoutez ces versements √† votre capital.",
            )

    # === Section 2: Croissance & Dur√©e ===
    with col2:
        st.subheader(
            "üìà Croissance & Dur√©e",
            help="Param√©trez le rendement attendu et la dur√©e de votre investissement.",
        )

        taux_annuel = st.number_input(
            "Taux d'int√©r√™t annuel (%)",
            min_value=0.0,
            max_value=50.0,
            value=5.0,
            step=0.1,
            key="ic_taux",
            format="%.1f",
            help="Taux de rendement attendu par an, hors inflation.",
        )

        duree_annees = st.number_input(
            "Dur√©e du placement (ann√©es)",
            min_value=1,
            max_value=50,
            value=10,
            step=1,
            key="ic_duree",
            help="Nombre d'ann√©es pendant lesquelles vous laissez votre capital fructifier.",
        )

    # === Section 3: Capitalisation des int√©r√™ts ===
    with col3:
        st.subheader(
            "‚öôÔ∏è Capitalisation des int√©r√™ts",
            help="D√©finissez la fr√©quence √† laquelle vos int√©r√™ts sont ajout√©s au capital, pour b√©n√©ficier de l‚Äôeffet compos√©.",
        )

        frequence_capitalisation = st.selectbox(
            "Fr√©quence de capitalisation",
            ["Mensuelle", "Trimestrielle", "Semestrielle", "Annuelle", "Continue"],
            index=3,  # Annuelle par d√©faut
            key="ic_freq_capitalisation",
            help="√Ä quelle fr√©quence les int√©r√™ts g√©n√©r√©s sont r√©investis dans le capital.",
        )

        moment_versement = st.selectbox(
            "Moment du versement p√©riodique",
            ["D√©but de p√©riode", "Fin de p√©riode"],
            index=1,  # Fin de p√©riode par d√©faut
            key="ic_moment_versement",
            help="Quand vos versements r√©guliers sont ajout√©s : avant ou apr√®s calcul des int√©r√™ts de la p√©riode.",
        )

    # Options avanc√©es
    st.subheader("Options avanc√©es")
    col1, col2, col3 = st.columns(3)

    # Fonction helper pour calculer la TMI
    def calculer_tmi_simplifiee(revenus_annuels, nb_parts=1, annee=2024):
        """Calcul simplifi√© de la TMI"""
        if annee == 2024:
            tranches = [
                (0, 11497, 0),
                (11498, 29315, 11),
                (29316, 83823, 30),
                (83824, 180294, 41),
                (180294, float("inf"), 45),
            ]
        else:  # 2023
            tranches = [
                (0, 11497, 0),
                (11498, 29315, 11),
                (29316, 83823, 30),
                (83824, 180294, 41),
                (180294, float("inf"), 45),
            ]

        quotient_familial = revenus_annuels / nb_parts
        tmi = 0

        for seuil_inf, seuil_sup, taux in tranches:
            if quotient_familial > seuil_inf:
                tmi = taux

        return tmi

    def calculer_taux_imposition_effectif(
        type_placement,
        duree_annees,
        type_revenus,
        tmi_personnelle=None,
        utiliser_tmi=False,
    ):
        """Calcule le taux d'imposition effectif selon le type de placement et la dur√©e"""

        if not utiliser_tmi or tmi_personnelle is None:
            # Utilisation des taux standard (PFU)
            if type_placement == "CTO (Compte-titres ordinaire)":
                return 30.0  # PFU : 17,2% IR + 12,8% PS
            elif type_placement == "PEA":
                if duree_annees >= 5:
                    return 12.8  # Seulement pr√©l√®vements sociaux
                else:
                    return 30.0  # PFU complet si retrait avant 5 ans
            else:  # Assurance-vie
                if duree_annees >= 8:
                    return 7.5 + 12.8  # 7,5% IR + 12,8% PS (apr√®s abattement)
                else:
                    return 30.0
        else:
            # Utilisation de la TMI personnelle
            if type_placement == "CTO (Compte-titres ordinaire)":
                if type_revenus == "Plus-values mobili√®res":
                    return 12.8  # Seulement pr√©l√®vements sociaux pour les PV
                elif type_revenus == "Dividendes":
                    # Option entre PFU (30%) ou bar√®me progressif (TMI + 12,8%)
                    taux_bareme = tmi_personnelle + 12.8
                    return min(30.0, taux_bareme)  # Le plus avantageux
                else:  # Int√©r√™ts
                    taux_bareme = tmi_personnelle + 12.8
                    return min(30.0, taux_bareme)
            elif type_placement == "PEA":
                if duree_annees >= 5:
                    return 12.8  # Seulement pr√©l√®vements sociaux
                else:
                    # Avant 5 ans, utilisation du bar√®me ou PFU
                    taux_bareme = tmi_personnelle + 12.8
                    return min(30.0, taux_bareme)
            else:  # Assurance-vie
                if duree_annees >= 8:
                    if type_revenus == "Plus-values mobili√®res":
                        return 7.5 + 12.8  # Taux sp√©cifique AV
                    else:
                        taux_bareme = min(tmi_personnelle, 7.5) + 12.8
                        return taux_bareme
                else:
                    taux_bareme = tmi_personnelle + 12.8
                    return min(30.0, taux_bareme)

    with col1:
        ajuster_inflation = st.checkbox(
            "Ajuster √† l'inflation", value=False, key="ic_inflation_check"
        )

        if ajuster_inflation:
            taux_inflation = st.number_input(
                "Taux d'inflation annuel (%)",
                min_value=0.0,
                max_value=30.0,
                value=1.8,
                step=0.1,
                key="ic_inflation",
            )
        else:
            taux_inflation = 0.0

    with col2:
        calcul_apres_impot = st.checkbox(
            "Calcul apr√®s imp√¥t", value=False, key="ic_impot_check"
        )

        if calcul_apres_impot:
            type_placement = st.selectbox(
                "Type de placement",
                ["CTO (Compte-titres ordinaire)", "PEA", "Assurance-vie"],
                key="ic_placement",
            )

    with col3:
        if calcul_apres_impot:
            # Checkbox pour l'optimisation fiscale avanc√©e
            optimisation_fiscale = st.checkbox(
                "Utiliser ma TMI personnelle",
                value=False,
                key="ic_optimisation_fiscale",
                help="Utilise votre TMI r√©elle pour optimiser le calcul d'imp√¥t",
            )

    # Section TMI personnalis√©e (affichage conditionnel)
    if calcul_apres_impot and optimisation_fiscale:
        st.subheader("üßÆ Optimisation fiscale personnalis√©e")

        col1, col2, col3, col4 = st.columns([1.2, 1, 1, 1])

        # Revenus annuels
        with col1:
            revenus_annuels_tmi = st.number_input(
                "Vos revenus annuels (‚Ç¨)",
                min_value=0.0,
                value=45000.0,
                step=1000.0,
                key="ic_revenus_tmi",
                help="Revenus imposables avant d√©ductions",
            )

        # Situation familiale
        with col2:
            situation_familiale_ic = st.selectbox(
                "Situation familiale",
                [
                    "C√©libataire",
                    "Mari√©(e)/Pacs√©(e)",
                    "Couple + 1 enfant",
                    "Couple + 2 enfants",
                    "Couple + 3 enfants",
                ],
                key="ic_situation",
            )

            parts_fiscales_ic = {
                "C√©libataire": 1,
                "Mari√©(e)/Pacs√©(e)": 2,
                "Couple + 1 enfant": 2.5,
                "Couple + 2 enfants": 3,
                "Couple + 3 enfants": 4,
            }

            nb_parts_ic = parts_fiscales_ic[situation_familiale_ic]

        # Type de revenus g√©n√©r√©s
        with col3:
            optimisation_type = st.selectbox(
                "Type de revenus g√©n√©r√©s",
                [
                    "Plus-values mobili√®res",
                    "Int√©r√™ts (livrets/obligations)",
                    "Dividendes",
                ],
                key="ic_optimisation_type",
                help="Type de revenus g√©n√©r√©s par votre placement",
            )

        # Calcul et affichage TMI
        with col4:
            tmi_personnelle = calculer_tmi_simplifiee(revenus_annuels_tmi, nb_parts_ic)
            st.metric("Votre TMI", f"{tmi_personnelle}%")

            # Calcul du taux effectif avec TMI
            taux_effectif_tmi = calculer_taux_imposition_effectif(
                type_placement, duree_annees, optimisation_type, tmi_personnelle, True
            )
            st.metric("Taux effectif", f"{taux_effectif_tmi:.1f}%")

    # Calcul du taux d'imposition √† utiliser
    if calcul_apres_impot:
        if optimisation_fiscale:
            taux_imposition = calculer_taux_imposition_effectif(
                type_placement, duree_annees, optimisation_type, tmi_personnelle, True
            )
            type_revenus_utilise = optimisation_type
        else:
            taux_imposition = calculer_taux_imposition_effectif(
                type_placement, duree_annees, "Standard", None, False
            )
            type_revenus_utilise = "Standard"

        # Affichage des informations sur le type de placement
        if not optimisation_fiscale:
            if type_placement == "CTO (Compte-titres ordinaire)":
                st.info("üìã **CTO** : PFU de 30% (17,2% IR + 12,8% PS)")
            elif type_placement == "PEA":
                if duree_annees >= 5:
                    st.info("üìã **PEA** : Exon√©r√© apr√®s 5 ans + 12,8% PS")
                else:
                    st.info("üìã **PEA** : PFU de 30% si retrait avant 5 ans")
            else:  # Assurance-vie
                if duree_annees >= 8:
                    st.info(
                        "üìã **AV** : 7,5% + 12,8% PS apr√®s 8 ans (avec abattement 4 600‚Ç¨)"
                    )
                else:
                    st.info("üìã **AV** : PFU de 30% avant 8 ans")
    else:
        taux_imposition = 0.0
        type_revenus_utilise = "Aucun"

    # Mapping des fr√©quences
    freq_versement_map = {
        "Mensuel": 12,
        "Trimestriel": 4,
        "Semestriel": 2,
        "Annuel": 1,
    }
    freq_capitalisation_map = {
        "Mensuelle": 12,
        "Trimestrielle": 4,
        "Semestrielle": 2,
        "Annuelle": 1,
        "Continue": float("inf"),
    }

    m = freq_versement_map[frequence_versement]  # Fr√©quence des versements
    n = freq_capitalisation_map[frequence_capitalisation]  # Fr√©quence de capitalisation
    r = taux_annuel / 100
    t = duree_annees

    def calculer_interet_compose_avance(P, PMT, r, n, m, t, debut_periode=False):
        """
        Calcul des int√©r√™ts compos√©s avec fr√©quences diff√©rentes pour capitalisation et versements

        P : capital initial
        PMT : montant du versement p√©riodique
        r : taux annuel (ex: 0.05 pour 5%)
        n : fr√©quence de capitalisation (nombre de p√©riodes d'int√©r√™t par an)
        m : fr√©quence des versements (nombre de versements par an)
        t : dur√©e en ann√©es
        debut_periode : True si versements en d√©but de p√©riode, False si fin de p√©riode
        """

        # Cas sp√©cial : capitalisation continue
        if n == float("inf"):
            # Valeur future du capital initial avec capitalisation continue
            FV_capital = P * np.exp(r * t)

            # Pour les versements avec capitalisation continue
            if PMT > 0 and r > 0:
                # Facteur d'ajustement pour versements en d√©but vs fin de p√©riode
                facteur_moment = np.exp(r / m) if debut_periode else 1

                # Somme des versements avec capitalisation continue
                FV_versements = 0
                for k in range(int(m * t)):
                    temps_depuis_versement = t - k / m
                    if debut_periode:
                        temps_depuis_versement -= 1 / m
                    FV_versements += (
                        PMT * facteur_moment * np.exp(r * temps_depuis_versement)
                    )
            elif PMT > 0:
                FV_versements = PMT * m * t
            else:
                FV_versements = 0

            return FV_capital + FV_versements

        # Cas normal : capitalisation discr√®te
        # Valeur future du capital initial
        FV_capital = P * (1 + r / n) ** (n * t)

        # Valeur future des versements
        if PMT > 0 and r > 0:
            # Facteur d'ajustement pour versements en d√©but vs fin de p√©riode
            facteur_moment = (1 + r / n) ** (n / m) if debut_periode else 1

            FV_versements = 0
            total_versements = int(m * t)

            for k in range(total_versements):
                # Temps restant apr√®s le k-i√®me versement (en ann√©es)
                temps_restant = t - (k + 1) / m
                if debut_periode:
                    temps_restant += 1 / m

                # Capitalisation du versement jusqu'√† la fin
                if temps_restant >= 0:
                    FV_versements += (
                        PMT * facteur_moment * (1 + r / n) ** (n * temps_restant)
                    )
        elif PMT > 0:
            FV_versements = PMT * m * t
        else:
            FV_versements = 0

        return FV_capital + FV_versements

    def calc_van_versements_avance(P, PMT, i, m, t, debut_periode=False):
        """Calcul de la valeur actuelle nette des versements"""
        van = P  # Capital initial √† t=0

        facteur_moment = (1 + i) ** (1 / m) if debut_periode else 1

        total_versements = int(m * t)
        for k in range(total_versements):
            temps_versement = (k + 1) / m
            if debut_periode:
                temps_versement -= 1 / m
            van += PMT * facteur_moment / ((1 + i) ** temps_versement)
        return van

    # Calculs avec les nouvelles options
    debut_periode = moment_versement == "D√©but de p√©riode"

    valeur_finale_brute = calculer_interet_compose_avance(
        capital_initial, versement_periodique, r, n, m, t, debut_periode
    )
    total_verse = capital_initial + (versement_periodique * m * t)
    interets_bruts = valeur_finale_brute - total_verse

    van_versements = calc_van_versements_avance(
        capital_initial, versement_periodique, taux_inflation / 100, m, t, debut_periode
    )

    # Application de l'imp√¥t sur les int√©r√™ts uniquement
    if calcul_apres_impot and interets_bruts > 0:
        # Calcul des abattements selon le type de placement
        abattement_applique = 0
        if type_placement == "Assurance-vie" and duree_annees >= 8:
            # Abattement de 4 600‚Ç¨ pour une personne seule
            abattement_applique = 4600
            interets_imposables = max(0, interets_bruts - abattement_applique)
        else:
            interets_imposables = interets_bruts

        impots_sur_interets = interets_imposables * (taux_imposition / 100)
        valeur_finale_nette = total_verse + (interets_bruts - impots_sur_interets)
        interets_nets = interets_bruts - impots_sur_interets
    else:
        valeur_finale_nette = valeur_finale_brute
        interets_nets = interets_bruts
        impots_sur_interets = 0
        abattement_applique = 0
        interets_imposables = interets_bruts

    # Ajustement inflation (sur la valeur finale)
    if ajuster_inflation:
        pouvoir_achat_final = valeur_finale_nette / ((1 + taux_inflation / 100) ** t)
        perte_pouvoir_achat = valeur_finale_nette - pouvoir_achat_final

        rendement_reel_annuel = (
            ((pouvoir_achat_final / van_versements) ** (1 / t) - 1) * 100
            if van_versements > 0
            else 0
        )
    else:
        pouvoir_achat_final = valeur_finale_nette
        perte_pouvoir_achat = 0
        rendement_reel_annuel = (
            ((valeur_finale_nette / van_versements) ** (1 / t) - 1) * 100
            if van_versements > 0
            else 0
        )

    st.markdown("---")

    # Affichage des param√®tres de capitalisation
    col1, col2 = st.columns(2)
    with col1:
        if frequence_capitalisation == "Continue":
            st.info(f"üîÑ **Capitalisation continue** - Int√©r√™ts calcul√©s en permanence")
        else:
            st.info(
                f"üîÑ **Capitalisation {frequence_capitalisation.lower()}** - Int√©r√™ts calcul√©s {freq_capitalisation_map[frequence_capitalisation]} fois par an"
            )

    with col2:
        st.info(
            f"üìÖ **Versements {frequence_versement.lower()}s** en **{moment_versement.lower()}**"
        )

    frequences_affichage = {
        "Mensuel": "par mois",
        "Trimestriel": "par trimestre",
        "Semestriel": "par semestre",
        "Annuel": "par an",
    }
    # Formattage dynamique
    affichage_frequence = frequences_affichage.get(
        frequence_versement, frequence_versement.lower()
    )

    if capital_initial:
        st.info(
            f"üìù Pour un investissement initial de {capital_initial} ‚Ç¨ avec un versement de {versement_periodique} ‚Ç¨ {affichage_frequence} sur {duree_annees} ans avec un rendement de {taux_annuel} % par an."
        )
    else:
        # R√©sultats
        st.info(
            f"üìù Pour un investissement de {versement_periodique:.1f} ‚Ç¨ {affichage_frequence} sur {duree_annees} ans avec un rendement de {taux_annuel} % par an."
        )

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üíº Total vers√©", f"{total_verse:,.2f} ‚Ç¨")
    with col2:
        if calcul_apres_impot:
            st.metric("üí∞ Valeur finale (nette)", f"{valeur_finale_nette:,.2f} ‚Ç¨")
        else:
            st.metric("üí∞ Valeur finale", f"{valeur_finale_brute:,.2f} ‚Ç¨")
    with col3:
        if calcul_apres_impot:
            st.metric(
                "üìà Int√©r√™ts nets",
                f"{interets_nets:,.2f} ‚Ç¨",
                f"{(interets_nets/total_verse)*100:.1f}%" if total_verse > 0 else "0%",
            )
        else:
            st.metric(
                "üìà Int√©r√™ts bruts",
                f"{interets_bruts:,.2f} ‚Ç¨",
                f"{(interets_bruts/total_verse)*100:.1f}%" if total_verse > 0 else "0%",
            )
    with col4:
        if ajuster_inflation:
            st.metric(
                "üõí Pouvoir d'achat final",
                f"{pouvoir_achat_final:,.2f} ‚Ç¨",
            )
        elif calcul_apres_impot and impots_sur_interets > 0:
            st.metric(
                "üí∏ Imp√¥ts pay√©s",
                f"{impots_sur_interets:,.2f} ‚Ç¨",
                f"{taux_imposition:.1f}%",
            )

    # Comparaison PFU vs TMI si optimisation activ√©e
    if calcul_apres_impot and optimisation_fiscale:
        st.subheader("‚öñÔ∏è Comparaison PFU vs Bar√®me progressif (TMI)")

        # Calcul avec PFU standard
        taux_pfu = calculer_taux_imposition_effectif(
            type_placement, duree_annees, "Standard", None, False
        )

        if type_placement == "Assurance-vie" and duree_annees >= 8:
            interets_imposables_pfu = max(0, interets_bruts - 4600)
        else:
            interets_imposables_pfu = interets_bruts

        impots_pfu = interets_imposables_pfu * (taux_pfu / 100)
        valeur_finale_pfu = total_verse + (interets_bruts - impots_pfu)

        # Comparaison
        gain_optimisation = valeur_finale_nette - valeur_finale_pfu

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                "üí∞ PFU Standard",
                f"{valeur_finale_pfu:,.2f} ‚Ç¨",
                # f"Imp√¥t: {impots_pfu:,.2f} ‚Ç¨ ({taux_pfu:.1f}%)",
            )
        with col2:
            st.metric(
                "üéØ Avec votre TMI",
                f"{valeur_finale_nette:,.2f} ‚Ç¨",
                # f"Imp√¥t: {impots_sur_interets:,.2f} ‚Ç¨ ({taux_imposition:.1f}%)",
            )
        with col3:
            couleur_gain = "normal" if gain_optimisation >= 0 else "inverse"
            st.metric(
                "üìä Gain d'optimisation",
                f"{gain_optimisation:+,.2f} ‚Ç¨",
                # f"{(gain_optimisation/valeur_finale_pfu)*100:+.2f}%",
                delta_color=couleur_gain,
            )

    # Comparaison des fr√©quences de capitalisation
    if st.checkbox("üìä Comparer les fr√©quences de capitalisation", key="compare_freq"):
        st.subheader("Impact de la fr√©quence de capitalisation")

        freq_comparison = {
            "Annuelle": 1,
            "Semestrielle": 2,
            "Trimestrielle": 4,
            "Mensuelle": 12,
            "Continue": float("inf"),
        }

        comparison_results = []
        for freq_name, freq_value in freq_comparison.items():
            valeur_comp = calculer_interet_compose_avance(
                capital_initial,
                versement_periodique,
                r,
                freq_value,
                m,
                t,
                debut_periode,
            )
            interets_comp = valeur_comp - total_verse
            comparison_results.append(
                {
                    "Fr√©quence": freq_name,
                    "Valeur finale": valeur_comp,
                    "Int√©r√™ts": interets_comp,
                    "Gain vs Annuelle": (
                        interets_comp - comparison_results[0]["Int√©r√™ts"]
                        if comparison_results
                        else 0
                    ),
                }
            )

        df_comparison = pd.DataFrame(comparison_results)

        col1, col2 = st.columns(2)
        with col1:
            st.dataframe(
                df_comparison.style.format(
                    {
                        "Valeur finale": "{:,.2f} ‚Ç¨",
                        "Int√©r√™ts": "{:,.2f} ‚Ç¨",
                        "Gain vs Annuelle": "{:+,.2f} ‚Ç¨",
                    }
                ),
                hide_index=True,
            )

        with col2:
            fig_comp = px.bar(
                df_comparison,
                x="Fr√©quence",
                y="Int√©r√™ts",
                title="Int√©r√™ts selon la fr√©quence de capitalisation",
            )
            st.plotly_chart(fig_comp, use_container_width=True)

    # Informations d√©taill√©es selon les options
    if calcul_apres_impot or ajuster_inflation:
        st.subheader("üìä D√©tail des calculs")
        col1, col2 = st.columns(2)

        with col1:
            if calcul_apres_impot:
                # Calcul optimis√© pour l'abattement annuel
                if abattement_applique > 0:
                    annees_abattement = math.ceil(interets_bruts / abattement_applique)
                    conseil_abattement = f"Pour optimiser votre imposition, vous devriez retirer {abattement_applique:,.0f}‚Ç¨/an sur {annees_abattement} ans."
                else:
                    conseil_abattement = ""

                # Information sur le type de revenus si TMI utilis√©e
                info_revenus = ""
                if optimisation_fiscale:
                    info_revenus = f"- Type de revenus : {type_revenus_utilise}\n"
                    if "tmi_personnelle" in locals():
                        info_revenus += f"- Votre TMI : {tmi_personnelle}%\n"

                st.info(
                    f"""### üíº Fiscalit√© {type_placement}

{info_revenus}
‚Ä¢ **Int√©r√™ts bruts** : {interets_bruts:,.2f} ‚Ç¨

{"‚Ä¢ **Abattement appliqu√©** : {:,.0f} ‚Ç¨\n".format(abattement_applique) if abattement_applique > 0 else ""}\
‚Ä¢ **Int√©r√™ts imposables** : {interets_imposables:,.2f} ‚Ç¨
‚Ä¢ **Taux d'imposition** : {taux_imposition:.1f} %
‚Ä¢ **Imp√¥ts √† payer** : {impots_sur_interets:,.2f} ‚Ç¨
‚Ä¢ ‚úÖ **Int√©r√™ts nets apr√®s imp√¥ts** : {interets_nets:,.2f} ‚Ç¨

{conseil_abattement}
"""
                )

        with col2:
            if ajuster_inflation:
                st.warning(
                    f"""
                **Impact de l'inflation ({taux_inflation}%/an) :**
                - Valeur nominale : {valeur_finale_nette:,.2f} ‚Ç¨
                - Valeur r√©elle : {pouvoir_achat_final:,.2f} ‚Ç¨
                - Perte de pouvoir d'achat : {perte_pouvoir_achat:,.2f} ‚Ç¨
                - **Rendement r√©el annualis√© : {rendement_reel_annuel:.2f}%**
                - **Rendement r√©el sur la p√©riode : {((pouvoir_achat_final/van_versements)*100-100):.1f}%**
                """
                )

    # Graphique √©volution avec options
    annees = list(range(0, int(duree_annees) + 1))
    valeurs_brutes = []
    valeurs_nettes = []
    valeurs_reelles = []
    versements_cumules = []

    for annee in annees:
        # Valeur brute
        valeur_brute = calculer_interet_compose_avance(
            capital_initial, versement_periodique, r, n, m, annee, debut_periode
        )
        valeurs_brutes.append(valeur_brute)

        # Versements cumul√©s
        verse_cumule = capital_initial + (versement_periodique * m * annee)
        versements_cumules.append(verse_cumule)

        # Valeur nette (apr√®s imp√¥t)
        if calcul_apres_impot and annee > 0:
            interets_annee = valeur_brute - verse_cumule
            if type_placement == "Assurance-vie" and annee >= 8:
                interets_imposables_annee = max(0, interets_annee - 4600)
            else:
                interets_imposables_annee = interets_annee

            # Adaptation du taux d'imposition selon l'anciennet√©
            if type_placement == "PEA" and annee >= 5:
                taux_annee = 12.8
            elif type_placement == "Assurance-vie" and annee >= 8:
                taux_annee = 7.5 + 12.8
            elif type_placement == "Assurance-vie":
                taux_annee = 30
            else:
                taux_annee = taux_imposition

            impots_annee = interets_imposables_annee * (taux_annee / 100)
            valeur_nette = verse_cumule + (interets_annee - impots_annee)
        else:
            valeur_nette = valeur_brute

        valeurs_nettes.append(valeur_nette)

        # Valeur r√©elle (ajust√©e inflation)
        if ajuster_inflation and annee > 0:
            valeur_reelle = valeur_nette / ((1 + taux_inflation / 100) ** annee)
        else:
            valeur_reelle = valeur_nette

        valeurs_reelles.append(valeur_reelle)

    fig = go.Figure()

    # Versements cumul√©s
    fig.add_trace(
        go.Scatter(
            x=annees,
            y=versements_cumules,
            fill="tonexty",
            name="Versements cumul√©s",
            line=dict(color="#1f77b4"),
        )
    )

    # Valeur finale selon les options choisies
    if ajuster_inflation:
        fig.add_trace(
            go.Scatter(
                x=annees,
                y=valeurs_reelles,
                fill="tonexty",
                name="Valeur r√©elle (apr√®s inflation)",
                line=dict(color="#d62728"),
            )
        )
        if calcul_apres_impot:
            fig.add_trace(
                go.Scatter(
                    x=annees,
                    y=valeurs_nettes,
                    fill=None,
                    name="Valeur nette (avant inflation)",
                    line=dict(color="#ff7f0e", dash="dot"),
                )
            )
    elif calcul_apres_impot:
        fig.add_trace(
            go.Scatter(
                x=annees,
                y=valeurs_nettes,
                fill="tonexty",
                name="Valeur nette (apr√®s imp√¥t)",
                line=dict(color="#ff7f0e"),
            )
        )
        fig.add_trace(
            go.Scatter(
                x=annees,
                y=valeurs_brutes,
                fill=None,
                name="Valeur brute (avant imp√¥t)",
                line=dict(color="#2ca02c", dash="dot"),
            )
        )
    else:
        fig.add_trace(
            go.Scatter(
                x=annees,
                y=valeurs_brutes,
                fill="tonexty",
                name="Valeur totale",
                line=dict(color="#ff7f0e"),
            )
        )

    fig.update_layout(
        title=f"√âvolution du capital (Capitalisation {frequence_capitalisation.lower()}, Versements {moment_versement.lower()})",
        xaxis_title="Ann√©es",
        yaxis_title="Montant (‚Ç¨)",
        hovermode="x unified",
    )
    st.plotly_chart(fig, use_container_width=True)
