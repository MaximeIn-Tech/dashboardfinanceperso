import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from utils.helpers import format_nombre


def calculateur_fire_render():
    st.header("üî• Calculateur FI/RE (Financial Independence, Retire Early)")

    col1, col2, col3 = st.columns(3)

    with col1:
        revenus_annuels = st.number_input(
            "Revenus annuels nets (‚Ç¨)",
            min_value=0.0,
            value=40000.0,
            step=1000.0,
            format="%.0f",
            key="fire_revenus",
        )

        depenses_annuelles = st.number_input(
            "D√©penses annuelles (‚Ç¨)",
            min_value=0.0,
            value=25000.0,
            step=1000.0,
            format="%.0f",
            key="fire_depenses",
        )

    with col2:
        patrimoine_actuel = st.number_input(
            "Patrimoine actuel (‚Ç¨)",
            min_value=0.0,
            value=10000.0,
            step=1000.0,
            format="%.0f",
            key="fire_patrimoine",
        )

        taux_retour = st.number_input(
            "Taux de retour attendu (%)",
            min_value=0.0,
            max_value=20.0,
            value=7.0,
            step=0.5,
            key="fire_taux",
        )

    with col3:
        taux_retrait = st.number_input(
            "R√®gle de retrait (%)",
            min_value=1.0,
            max_value=10.0,
            value=4.0,
            step=0.5,
            key="fire_retrait",
            help="Pourcentage du patrimoine que vous pourrez retirer chaque ann√©e en retraite (r√®gle des 4%)",
        )

        age_actuel = st.number_input(
            "√Çge actuel", min_value=18, max_value=65, value=30, key="fire_age"
        )

    # Calculs FIRE
    epargne_annuelle = revenus_annuels - depenses_annuelles
    taux_epargne = (
        (epargne_annuelle / revenus_annuels) * 100 if revenus_annuels > 0 else 0
    )

    # Calcul du nombre FIRE (25x les d√©penses annuelles pour la r√®gle des 4%)
    nombre_fire = depenses_annuelles * (100 / taux_retrait)

    # Calcul du temps pour atteindre FIRE
    if epargne_annuelle > 0 and taux_retour > 0:
        r_annual = taux_retour / 100
        if patrimoine_actuel >= nombre_fire:
            annees_fire = 0
        else:
            # Formule pour calculer le temps n√©cessaire avec versements p√©riodiques
            if patrimoine_actuel > 0:
                annees_fire = np.log(
                    (nombre_fire * r_annual / epargne_annuelle + 1)
                    / (patrimoine_actuel * r_annual / epargne_annuelle + 1)
                ) / np.log(1 + r_annual)
            else:
                annees_fire = np.log(
                    nombre_fire * r_annual / epargne_annuelle + 1
                ) / np.log(1 + r_annual)
    else:
        annees_fire = float("inf")

    age_fire = age_actuel + annees_fire

    st.markdown("---")

    # M√©triques FIRE
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric(
            "üí∞ Nombre FIRE",
            f"{format_nombre(nombre_fire)} ‚Ç¨",
            help="Votre capital investi pour pouvoir √™tre FI/RE.",
        )
    with col2:
        st.metric(
            "üìä Taux d'√©pargne",
            f"{taux_epargne:.1f}%",
            help="Votre capacit√©/taux d'√©pargne accessible.",
        )
    with col3:
        if annees_fire < 100:
            st.metric(
                "‚è∞ Ann√©es jusqu'√† FIRE",
                f"{annees_fire:.1f} ans",
                help="Le nombre d'ann√©es qu'il vous reste pour √™tre FI/RE.",
            )
        else:
            st.metric("‚è∞ Ann√©es jusqu'√† FIRE", "Impossible")
    with col4:
        if annees_fire < 100:
            st.metric(
                "üéÇ √Çge FIRE",
                f"{age_fire:.0f} ans",
                help="Votre √¢ge quand vous pourrez √™tre FI/RE.",
            )
        else:
            st.metric("üéÇ √Çge FIRE", "N/A")

    # Conseils FIRE
    col1, col2 = st.columns(2)

    with col1:
        if taux_epargne >= 50:
            st.success(
                "üöÄ Excellent taux d'√©pargne ! Vous √™tes sur la voie rapide vers FIRE."
            )
        elif taux_epargne >= 25:
            st.info("üëç Bon taux d'√©pargne. Continuez comme √ßa !")
        elif taux_epargne >= 10:
            st.warning(
                "‚ö†Ô∏è Taux d'√©pargne mod√©r√©. Essayez d'augmenter vos revenus ou r√©duire vos d√©penses."
            )
        else:
            st.error(
                "üìâ Taux d'√©pargne faible. FIRE sera difficile √† atteindre sans changements majeurs."
            )

    with col2:
        st.info(
            f"""
        **Votre situation FIRE :**
        - √âpargne mensuelle : {format_nombre(epargne_annuelle/12)} ‚Ç¨
        - Revenus passifs n√©cessaires : {format_nombre(depenses_annuelles)} ‚Ç¨/an
        - Patrimoine manquant : {format_nombre(max(0, nombre_fire - patrimoine_actuel))} ‚Ç¨
        """
        )

    # Simulation √©volution patrimoine
    if annees_fire < 50:
        annees_sim = list(range(0, int(annees_fire) + 5))
        patrimoine_evolution = []

        for annee in annees_sim:
            if annee == 0:
                patrimoine_evolution.append(patrimoine_actuel)
            else:
                # Croissance du patrimoine avec int√©r√™ts compos√©s et √©pargne annuelle
                patrimoine = patrimoine_actuel * (1 + taux_retour / 100) ** annee
                if epargne_annuelle > 0:
                    patrimoine += epargne_annuelle * (
                        ((1 + taux_retour / 100) ** annee - 1) / (taux_retour / 100)
                    )
                patrimoine_evolution.append(patrimoine)

        fig_fire = go.Figure()
        fig_fire.add_trace(
            go.Scatter(
                x=annees_sim,
                y=patrimoine_evolution,
                name="Patrimoine projet√©",
                line=dict(color="#ff7f0e"),
            )
        )
        fig_fire.add_hline(
            y=nombre_fire,
            line_dash="dash",
            line_color="red",
            annotation_text="Nombre FIRE",
        )
        fig_fire.update_layout(
            title="Projection vers l'ind√©pendance financi√®re",
            xaxis_title="Ann√©es",
            yaxis_title="Patrimoine (‚Ç¨)",
        )
        st.plotly_chart(fig_fire, use_container_width=True)
